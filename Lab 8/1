#include<iostream>
#include<cmath>

using namespace std;

class Complex {
private:
    double real;
    double imaginary;

public:
    Complex(double r = 0, double i = 0) : real(r), imaginary(i) {}

    Complex operator+(const Complex& other) {
        return Complex(real + other.real, imaginary + other.imaginary);
    }

    Complex operator*(const Complex& other) {
        double r = real * other.real - imaginary * other.imaginary;
        double i = real * other.imaginary + imaginary * other.real;
        return Complex(r, i);
    }

    friend ostream& operator<<(ostream& out, const Complex& c) {
        out << "(" << c.real << " + " << c.imaginary << "i)";
        return out;
    }

    friend double magnitude(const Complex& c);
};

double magnitude(const Complex& c) {
    return sqrt(c.real * c.real + c.imaginary * c.imaginary);
}

int main() {
    Complex c1(3, 4);
    Complex c2(1, 2);

    Complex c3 = c1 + c2;
    cout << "c1 + c2 = " << c3 << endl;

    Complex c4 = c1 * c2;
    cout << "c1 * c2 = " << c4 << endl;

    double mag = magnitude(c1);
    cout << "Magnitude of c1 = " << mag << endl;

    return 0;
}
