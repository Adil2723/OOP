#include <iostream>
using namespace std;

class Vector2D {
private:
    double x, y;

public:
    Vector2D(double x = 0, double y = 0) : x(x), y(y) {}

    Vector2D operator+(const Vector2D& other) {
        return Vector2D(x + other.x, y + other.y);
    }

    Vector2D operator-(const Vector2D& other) {
        return Vector2D(x - other.x, y - other.y);
    }

    Vector2D operator*(double scalar) {
        return Vector2D(x * scalar, y * scalar);
    }

    friend ostream& operator<<(ostream& out, const Vector2D& v) {
        out << "(" << v.x << ", " << v.y << ")";
        return out;
    }

    friend double dotProduct(const Vector2D& v1, const Vector2D& v2);
};

double dotProduct(const Vector2D& v1, const Vector2D& v2) {
    return v1.x * v2.x + v1.y * v2.y;
}

int main() {
    Vector2D v1(3, 4);
    Vector2D v2(1, 2);
 

    cout << "v1: " << v1 << endl;
    cout << "v2: " << v2 << endl;

    Vector2D v3 = v1 + v2;
    cout << "v1 + v2 = " << v3 << endl;

    Vector2D v4 = v1 - v2;
    cout << "v1 - v2 = " << v4 << endl;

    Vector2D v5 = v1 * 2;
    cout << "v1 * 2 = " << v5 << endl;

    double dp = dotProduct(v1, v2);
    cout << "Dot product of v1 and v2 = " << dp << endl;

    return 0;
}

